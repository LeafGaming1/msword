local repo = 'https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'msword',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 1,
    ShowCustomCursor = false
})

-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    Heal = Window:AddTab('Heal'),
    Damage = Window:AddTab('Damage'),
    Items = Window:AddTab('Items'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}
getgenv().HealPLR = game.Players.LocalPlayer
getgenv().DamagePLR = game.Players.LocalPlayer

local LeftGroupBox = Tabs.Heal:AddLeftGroupbox('Basic Heal')
LeftGroupBox:AddInput('HealPLR', {
    Default = '',
    Numeric = false, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Player to heal',
    Tooltip = 'Set the player you want to heal', -- Information shown when you hover over the textbox

    Placeholder = 'Roblox', -- placeholder text when the box is empty
    MaxLength = 20,

    Callback = function(Value)
        local toSet = game.Players:FindFirstChild(Value)
        if not toSet then
            if string.lower(Value) == "me" then
                toSet = game.Players.LocalPlayer
            else
                return
            end
        end
        getgenv().HealPLR = toSet
    end
})
LeftGroupBox:AddInput('HealAMNT', {
    Default = '',
    Numeric = true,
    Finished = false,

    Text = "Amount to heal",
    Tooltip = "Set the amount of HP to heal",

    Placeholder = "0",
    MaxLength = 10,

    Callback = function(Value)
        if Value < 0 or Value == nil then
            warn("Cannot set HP to heal to "..Value)
        end
    end
})
local Damage = LeftGroupBox:AddButton({
    Text = 'Heal',
    Func = function()
        if tonumber(Options.HealAMNT.Value) < 0 or Options.HealAMNT.Value == nil then
            return
        end
        if not getgenv().HealPLR or not game.Players:FindFirstChild(tostring(getgenv().HealPLR)) then
            return
        end
        local args = {
            [1] = "HEAL_PLAYER",
            [2] = getgenv().HealPLR,
            [3] = Options.HealAMNT.Value
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkEvents"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
    end,
    DoubleClick = false, -- You will have to click this button twice to trigger the callback
    Tooltip = 'Heal the player set and the HP set.'
})
local RightGroupbox = Tabs.Heal:AddRightGroupbox('Other Heal Functions')
RightGroupbox:AddToggle("GodMode", {
    Text = "God",
    Default = false,
    Tooltip = "Makes you invincible (partially). I am too lazy to add functions for other players.",

    Callback = function(Value)
        local running = false
        while Value do
            if running then return end
            running = true
            task.spawn(function()
                while task.wait(1) do
                    if running == false then break end
                    local args = {
                        [1] = "HEAL_PLAYER",
                        [2] = getgenv().HealPLR,
                        [3] = 100
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkEvents"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                end
            end)
            task.wait(3)
        end
        running = false
    end
})
local LeftGroupBox = Tabs.Damage:AddLeftGroupbox("Damage")
LeftGroupBox:AddInput('DamagePLR', {
    Default = '',
    Numeric = false, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Player to damage',
    Tooltip = 'Set the player you want to damage', -- Information shown when you hover over the textbox

    Placeholder = 'Roblox', -- placeholder text when the box is empty
    MaxLength = 20,

    Callback = function(Value)
        local toSet = game.Players:FindFirstChild(Value)
        if not toSet then
            if string.lower(Value) == "me" then
                toSet = game.Players.LocalPlayer
            end
        else
            getgenv().DamagePLR = toSet
        end
    end
})
LeftGroupBox:AddInput('DamageAMNT', {
    Default = '',
    Numeric = true,
    Finished = false,

    Text = "Amount to damage",
    Tooltip = "Set the amount of HP to heal",

    Placeholder = "0",
    MaxLength = 10,

    Callback = function(Value)
        Value = tonumber(Value)
        if Value <= 0 or Value == nil then
            warn("Cannot set HP to damage to "..Value)
        end
        
    end
})
local Damage = LeftGroupBox:AddButton({
    Text = 'Damage',
    Func = function()
        if tonumber(Options.DamageAMNT.Value) < 0 or Options.DamageAMNT.Value == nil then
            return
        end
        if not getgenv().DamagePLR or not game.Players:FindFirstChild(tostring(getgenv().DamagePLR)) then
            return
        end
        local args = {
            [1] = "HEAL_PLAYER",
            [2] = getgenv().DamagePLR,
            [3] = tonumber("-"..tostring(Options.DamageAMNT.Value))
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkEvents"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
    end,
    DoubleClick = true, -- You will have to click this button twice to trigger the callback
    Tooltip = 'Damage the player set and the HP set.'
})
local LeftGroupBox = Tabs.Items:AddLeftGroupbox("Give items (self only)")
LeftGroupBox:AddDropdown('Item', {
    Values = {'MedKit', 'Bandage', 'Donut'},
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Item',
    Tooltip = 'Pick the item', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        print("Set.")
    end
})
LeftGroupBox:AddInput('ItemAMNT', {
    Default = '1',
    Numeric = true,
    Finished = false,

    Text = "Amount",
    Tooltip = "Set the items to get",

    Placeholder = "1",
    MaxLength = 2,

    Callback = function(Value)
        Value = tonumber(Value)
        if Value < 0 or Value == nil then
            warn("Cannot set to "..Value)
        end
    end
})
local Give = LeftGroupBox:AddButton({
    Text = "Give",
    Func = function()
        local args = {
            [1] = "PICKUP_ITEM",
            [2] = Options.Item.Value
        }
        for i = 1, Options.ItemAMNT.Value do
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkEvents"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        end
    end,
    DoubleClick = false,
    Tooltip = "Get items."
})

-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(true)

-- Example of dynamically-updating watermark with common traits (fps and ping)
local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter = FrameCounter + 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('msword | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);

Library.KeybindFrame.Visible = false; -- todo: add a function for this

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    Library.Unloaded = true
    clearEsps()
    print('Unloaded!')
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
